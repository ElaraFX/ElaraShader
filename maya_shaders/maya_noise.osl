/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2009-2010 Sony Pictures Imageworks Inc., et al.
// All Rights Reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// * Neither the name of Sony Pictures Imageworks nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
/////////////////////////////////////////////////////////////////////////////

#include "mayautil.h"
#include "noise_utils.h"

shader maya_noise
[[ string help = "Maya noise"]]
(
	// Inputs
            float   i_threshold=0.0,
            float   i_amplitude=1.0,
            float   i_ratio=0.707,
            float   i_frequencyRatio=2.0,
            int     i_depthMax=3,
            int     i_inflection=0,
            float   i_time=0,
            float   i_frequency=8.0,
            float   i_implode=0.0,
            vector  i_implodeCenter=0.5,
            int     i_noiseType=1,
            float   i_density=1.0,
            float   i_spottyness=0.1,
            float   i_sizeRand=0.0,
            float   i_randomness=1.0,
            int     i_falloff=2,
            int     i_numWaves=5,
            
            color   i_defaultColor=0.5,
            color   i_colorGain=1.0,
            color   i_colorOffset=0.0,
            float   i_alphaGain=1.0,
            float   i_alphaOffset=0.0,
            int     i_alphaIsLuminance=0,
            int     i_invert=0,

            vector  i_uvCoord=0,

	// Outputs
	output float o_outAlpha=0.0,
	output color o_outColor=1.0
	)
{
	float ss = i_uvCoord[0];
	float tt = 1-i_uvCoord[1];

	if(ISUVDEFINED(ss, tt))
	{
		point pp = point(ss, tt, 0);

		/* Apply implosion. */
		if( i_implode != 0 )
		{
			point implodeCenter =
			point( i_implodeCenter[0], i_implodeCenter[1], 0 );

			vector dp = pp - implodeCenter;
			float l = length(dp);
			dp = dp / pow( l, i_implode );
			pp = dp + implodeCenter;
		}

		vector depth= vector(0, i_depthMax, 0);
		vector ripples = vector(2, 2, 2);
		point pn = pp * i_frequency;

		if( i_noiseType == 0 || i_noiseType == 3 || i_noiseType == 4 ) 
		{
			/* perlin, wispy and space time */

			if( i_noiseType == 3 )
			{
				/* wispy noise */
				pn += vector( noise( pn / 2 ) * 1.3 );
			}

			if( i_inflection > 0 )
			{
				o_outAlpha = i_amplitude * 
					fTurbulence(pn, i_time, 1, i_frequencyRatio, depth, i_ratio, ripples);
			} else { 
				o_outAlpha = 
					fBm(pn, i_time, i_amplitude, depth, 1, i_frequencyRatio, i_ratio);
			}
		}
		else if( i_noiseType == 1 )
		{
			/* "Billow" noise */
			float radius = sqrt( (0.5*0.5 + 0.5*0.5)*i_density );

			o_outAlpha = BillowNoise(
					pn, i_time, 2, radius, i_sizeRand, i_randomness, 
					i_falloff, i_spottyness, i_depthMax, 
					i_frequencyRatio, i_ratio, i_amplitude );
		}
		else if( i_noiseType == 2 )
		{
			/* "Wave" noise */
			float x =  ss * i_frequency;
			float y =  tt * i_frequency;
			float time = i_time;
			float timeRatio = sqrt(i_frequencyRatio);
			float amplitude = i_amplitude;
			
			float waveValue = 0;
			
			float i;
			for(i = 0; i < i_depthMax; i += 1)
			{
				float noiseValue = cos_waves(x, y, i_time, i_numWaves);

				x *= i_frequencyRatio;
				y *= i_frequencyRatio;
				time *= timeRatio;
				
				if(i_inflection > 0)
				{
					noiseValue = abs(noiseValue);
				}
				
				waveValue += amplitude * noiseValue;
				amplitude *= i_ratio;
			}
			
			if(i_inflection <= 0)
			{
				waveValue = 0.5 * waveValue + 0.5;
			}
			
			o_outAlpha = waveValue;
		}
      
		o_outAlpha += i_threshold;
		o_outAlpha = clamp(o_outAlpha,0,1);    
		o_outColor = o_outAlpha;

		colorBalance( o_outColor, 
			o_outAlpha, 
			i_alphaIsLuminance, 
			i_alphaGain, 
			i_alphaOffset, 
			i_colorGain, 
			i_colorOffset, 
			i_invert );
	}
	else
	{
		o_outColor = i_defaultColor;
		o_outAlpha = 0;
	}
}


