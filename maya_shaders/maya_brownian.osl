#include "texture3d.h"
#include "mayautil.h"
#include "noise_utils.h"

shader maya_brownian
[[ string help = "Maya fractal"]]
(
                // Inputs
                //
                float   i_alphaGain=1.0,
                int     i_alphaIsLuminance=0,
                float   i_alphaOffset=1.0,
                float   i_blend=0.0,
                color   i_colorGain=1.0,
                color   i_colorOffset=0,
                color   i_defaultColor=0.5,
                float   i_filter=1.0,
                float   i_filterOffset=0.0,
                vector  i_filterSize=1.0,
                float   i_increment=0.1,
                int     i_invert=0,
                int     i_local=0,
                float   i_lacunarity=4.0,
                float   i_octaves=3.0,
                vector  i_weight3d=1.0,
                matrix  i_placementMatrix=matrix(1.0, 0.0, 0.0, 0.0,
                                                 0.0, 1.0, 0.0, 0.0,
                                                 0.0, 0.0, 1.0, 0.0,
                                                 0.0, 0.0, 0.0, 1.0),
                int     i_wrap=0,

	// Outputs
	//
	output color o_outColor=1.0,
	output float o_outAlpha=0)
{
	float edgeDist;
	float outside;
    
    point pp = transformP(i_blend, 
		i_local, 
		i_placementMatrix, 
		i_wrap, edgeDist, 
		outside);

	if(outside < 1)
	{
		point pn = pp * point(i_weight3d[0], i_weight3d[1], i_weight3d[2]);

		float i = 1;
		float amp = 1;
		float sum = 0;
		point pq = pn;
		float filterWidth = area(pq);
		float inc = (i_increment < 1.0 ? 1.0 - i_increment : i_increment);

		for(i = 0.99; i < i_octaves; i += inc)
		{
			sum += amp * filteredsnoise(pq, filterWidth);
			amp *= inc;
			pq *= i_lacunarity;
			filterWidth *= i_lacunarity;
		}

		o_outAlpha = sum;
		o_outColor = clamp((o_outAlpha + 1) / 2, 0, 1);

		colorBalance(o_outColor, 
			o_outAlpha, 
			i_alphaIsLuminance, 
			i_alphaGain, 
			i_alphaOffset, 
			i_colorGain, 
			i_colorOffset, 
			i_invert);

		if(i_blend > 0 && edgeDist >= 0)
		{
			o_outColor = blendDefaultColor(i_blend, i_defaultColor, edgeDist, o_outColor);
		}
	}
	else
	{
		o_outColor = i_defaultColor;
		o_outAlpha = 0;
	}
}
	
