#include "stdosl.h"
#include "mayautil.h"
#include "noise_utils.h"
#include "texture3d.h"

//pre defined value, not have now.
#define Pref P

shader maya_projection
[[ string help = "Maya projection"]]
(
	// Inputs
	//
                    float       i_alphaGain = 1.0,
        /*uniform*/ int         i_alphaIsLuminance = 0,
                    float       i_alphaOffset = 0.0,
                    float       i_amplitudeX = 0.0,
                    float       i_amplitudeY = 0.0,
                    float       i_blend = 0.0,
                    color       i_colorGain = 1.0,
                    color       i_colorOffset = 1.0,
                    color       i_defaultColor = 0.5,
        /*uniform*/ vector      i_depth = vector(0, 10, 0),
        /*uniform*/ string      i_linkedCamera = "",
        /*uniform*/ int         i_fitType = 1,
        /*uniform*/ int         i_fitFill = 0,
        /*uniform*/ string      i_imageTextureName = "",
                    color       i_image = 0.0,
                    matrix      i_placementMatrix = matrix(  1.0, 0.0, 0.0, 0.0,
                                                        0.0, 1.0, 0.0, 0.0,
                                                        0.0, 0.0, 1.0, 0.0,
                                                        0.0, 0.0, 0.0, 1.0),
        /*uniform*/ int         i_projType = 1,
        /*uniform*/ float       i_ratio = 0.3,
                    vector      i_ripples = 1.0,
                    float       i_uAngle = 180.0,
                    float       i_vAngle = 90.0,
                    vector      i_uvCoord = 0.0,
        /*uniform*/ int         i_invert = 0,
                    int         i_local = 0,                    
                    int         i_wrap = 0,

	// Outputs
	//
	output float o_prev_ss = 1.0,
	output float o_prev_tt = 1.0,

	output color o_outColor = 1.0,
	output float o_outAlpha = 1.0)
{
	float ss; 
	float tt; 
	o_prev_ss = ss;
	o_prev_tt = tt;

	float edgeDist;
	float outside;
	/*varying*/ point pp = transformP(i_blend, 
		i_local, 
		i_placementMatrix, 
		i_wrap, edgeDist, 
		outside);

	if(outside < 1)
	{
		if(i_amplitudeX > 0.0 || i_amplitudeY > 0.0)
		{
			color mixValue = fBrownianNoise(pp, 0, 1, 1, 2, i_depth, i_ratio, i_ripples);
			pp = point(vector(-i_amplitudeX *mixValue[0], i_amplitudeY * mixValue[1], 0) + vector(pp));
		}

		if(i_projType == 1)
		{
			// planar projection
			ss = pp[0] / 2 + 0.5;
			tt = pp[1] / 2 + 0.5;
		}
		else if(i_projType == 2)
		{
			// spherical projection
			vector v = normalize(vector(pp));
			float vx = v[0];
			float vy = v[1];
			float vz = v[2];
			ss = 0.5 * atan2(vx, vz) / radians(i_uAngle);
			tt = 0.5 * atan2(vy, sqrt(vx * vx + vz * vz)) / radians(i_vAngle);
			ss += 0.5;
			tt += 0.5;
		}
		else if(i_projType == 3)
		{
			// cylindrical projection
			vector v = normalize(vector(pp));
			ss = atan2(v[0], v[2]) / radians(i_uAngle) + 0.5;
			tt = pp[1] / 2 + 0.5;
		}
		else if(i_projType == 4)
		{
			// ball projection
			vector v = normalize(vector(pp));

			float l = 0.5 / length( v + vector(0,0,1) );
			ss = v[0] * l + 0.5;
			tt = v[1] * l + 0.5;
		}
		else if(i_projType == 5)
		{
			// cubic projection
			vector v = normalize(vector(pp));
			if(abs(pp[0]) > abs(pp[1]) &&
				abs(pp[0]) > abs(pp[2]))
			{
				ss = pp[2] / pp[0];
				tt = pp[1] / pp[0];

				if(pp[0] < 0.0)
				{
					ss = -ss;
					tt = -tt;
				}
			}
			else if(abs(pp[1]) > abs(pp[0]) &&
				abs(pp[1]) > abs(pp[2]))
			{
				ss = pp[0] / pp[1];
				tt = pp[2] / pp[1];

				if(pp[1] < 0.0)
				{
					ss = -ss;
					tt = -tt;
				}
			}
			else if(abs(pp[2]) > abs(pp[1]) && 
				abs(pp[2]) > abs(pp[0]))
			{
				ss = pp[0] / pp[2];
				tt = pp[1] / pp[2];

				if(pp[2] < 0.0)
				{
					ss = -ss;
					tt = -tt;
				}
			}

			ss = (ss + 1) / 2;
			tt = (tt + 1) / 2;
		}
		else if(i_projType == 6)
		{
			// triplanar projection
			//extern normal N;
			normal NN = normalize(transform("shader", N));

			if(abs(NN[0]) >= abs(NN[1]) &&
				abs(NN[0]) >= abs(NN[2]))
			{
				ss = pp[2];
				tt = pp[1];
			}
			else if(abs(NN[1]) >= abs(NN[0]) &&
				abs(NN[1]) >= abs(NN[2]))
			{
				ss = pp[0];
				tt = pp[2];
			}
			else
			{
				ss = pp[0];
				tt = pp[1];
			}

			ss = 0.5 * ss + 0.5;
			tt = 0.5 * tt + 0.5;
		}
		else if(i_projType == 7)
		{
			// concentric projection
			// Not quite like maya's but fairly close. Can you do better?
			ss = noise("cell", pp);
			vector dp = pp - point(floor(pp[0]), floor(pp[1]), floor(pp[2])) - 0.5;
			float dx = dp[0];
			float dy = dp[1];
			float dz = dp[2];
			float t2 = 2 * length(dp);
			float power = 2 + 64 * (1-pow(1-t2/sqrt(3), 1/32));
			float t3 = 2 * pow(pow(abs(dx), power) + pow(abs(dy), power) + pow(abs(dz), power), 1/power);

			tt = t3 + noise( "cell", pp + vector(42,25,99));
			tt = 1 - tt;
		}
		else if(i_projType == 8)
		{
			// perspective projection
			//extern point P;
			point Pref;
			if( Pref == point(0) )
			{
				pp = transform( "current", "world", P );
			}
			else
			{
				pp = transform( "current", "world", Pref );
			}

			string cameraSpace = concat( "mayaCamera:", i_linkedCamera );
			point ps = transform( cameraSpace, "current", pp );
			
			float px = ps[0];
			float py = ps[1];

			/*uniform*/ float   imageAR = 1;
			/*uniform*/ int     imageRes[2];
			if( 1 == gettextureinfo( i_imageTextureName, "resolution", imageRes ) )
			{
				imageAR = imageRes[0] / imageRes[1];
			}

			if( i_fitType > 0 )
			{
				/*uniform*/ float frameAR;

				if( i_fitType == 1 )
				{
					/* Match Camera Film Gate */
					///*uniform*/ string option_name = concat("user:", i_linkedCamera, "_camera_aspectRatio");
					frameAR = 1.0;
					getattribute(i_linkedCamera, "aspect", frameAR );
				}
				else
				{
					/* Match Camera Resolution */
					///*uniform*/ float frameFormat[3];
                    float rez_x = 1.0;
                    float rez_y = 1.0;
					getattribute( i_linkedCamera, "res_x", rez_x );
                    getattribute( i_linkedCamera, "res_x", rez_y );
					frameAR = rez_x / rez_y;
				}

				if( i_fitFill == 0 )
				{
					/* Fill */
					py *= frameAR;
				}
				else if( i_fitFill == 1 )
				{
					/* Horizontal */
					py *= imageAR;
				}
				else
				{
					/* Vertical */
					px *= frameAR / imageAR;
					py *= frameAR;
				}
			}

			/* Only project in front of the camera. */
			if( ps[2] < 1 )
			{
				ss = px / 2 + 0.5;
				tt = py / 2 + 0.5;
			}
			else
			{   
                //use undefineuv -1000000
				ss = UNDEFINED_UV;
                tt = UNDEFINED_UV;
			}
		}
        
        if("" != i_imageTextureName)
        {
            o_outColor = texture(i_imageTextureName, ss, tt);
        }
        else
        {
            o_outColor = i_image;
        }       

		colorBalance(o_outColor, 
			o_outAlpha, 
			1, 
			i_alphaGain, 
			i_alphaOffset, 
			i_colorGain, 
			i_colorOffset, 
			i_invert);    
	}//end of outside
    
    else
	{
		o_outColor = i_defaultColor;
		o_outAlpha = 0;
	}
}

