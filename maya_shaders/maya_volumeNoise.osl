
#include "texture3d.h"
#include "mayautil.h"
#include "noise_utils.h"

shader maya_volumeNoise
[[ string help = "Maya volumeNoise"]]
(
                    /* "volumeNoise" related parameters */
                    float   i_threshold = 0.0, 
                    float   i_amplitude = 0.0, 
                    float   i_ratio = 0.707, 
                    float   i_frequencyRatio = 2,
                    int     i_depthMax = 3,
                    int     i_inflection = 0,
                    float   i_time = 0.0,
                    float   i_frequency = 8.0,
                    point   i_scale = 1.0,
                    point   i_origin = 0.0,
                    float   i_implode = 0.0,
                    point   i_implodeCenter = 0.0,

                    /* 0 = perlin, 1=bilow, 2=volume wave, 3=wispy, 4=spacetime */
                     int    i_noiseType = 1,

                    /* Billow noise attributes */ 
                    float   i_density = 1.0, 
                    float   i_spottyness = 0.1, 
                    float   i_sizeRand = 0.0, 
                    float   i_randomness = 1.0, 
                    /* 0 = linear, 1=smooth, 2=fast, 3=buble */
                    int     i_falloff = 2,

                    /* Wispy attribute */
                    int     i_numWaves = 5,
                 
                    /* "Color Balance" related parameters */
                    color   i_defaultColor = 0.5, 
                    color   i_colorGain = 1.0, 
                    color   i_colorOffset = 0.0,
                    float   i_alphaGain = 1.0, 
                    float   i_alphaOffset = 0.0,
                    int     i_alphaIsLuminance = 0,

                    /* "Effects" related parameters */
                    int     i_invert = 0,
                    int     i_local = 0,
                    int     i_wrap = 1,
                    float   i_blend = 0.0,

                    /* geomtric inputs */
                    matrix  i_placementMatrix=matrix(   1.0, 0.0, 0.0, 0.0,
                                                        0.0, 1.0, 0.0, 0.0,
                                                        0.0, 0.0, 1.0, 0.0,
                                                        0.0, 0.0, 0.0, 1.0),

	// Outputs
	//
	output float o_outAlpha = 1.0,
	output color o_outColor = 1.0)
{
	//point P;
	
	float outside;
	float edgeDist;

	point pp = transformP(i_blend, 
		i_local, 
		i_placementMatrix, 
		i_wrap, edgeDist, 
		outside );

	if(outside < 1)
	{
		/* Apply implosion. */
		if( i_implode != 0 )
		{
			vector dp = pp - i_implodeCenter;
			float l = length(dp);
			dp = dp / pow( l, i_implode );
			pp = dp + i_implodeCenter;
		}

		 vector   ripples = vector(2, 2, 2);
		 vector  octaves = vector(1, i_depthMax, 0);

		point pn = vector(pp / i_scale) * i_frequency + i_origin;

		if( i_noiseType == 0 || i_noiseType == 3 || i_noiseType == 4 ) 
		{
			/* perlin, wispy and space time */

			if( i_noiseType == 3 )
			{
				/* wispy noise */
				pn += vector( noise( pn / 2 ) * 1.3 );
			}

			if( i_inflection > 0 )
			{
				o_outAlpha = i_amplitude * 
					fTurbulence(pn, i_time, 1, i_frequencyRatio, octaves, i_ratio, ripples);
			} else { 
				o_outAlpha = 
					fBm(pn, i_time, i_amplitude, octaves, 1, i_frequencyRatio, i_ratio);
			}
		}
		else if( i_noiseType == 1 )
		{
			/* "Billow" noise */
			float radius = sqrt( (0.5*0.5 + 0.5*0.5)*i_density );

			o_outAlpha = BillowNoise(
					pn, i_time, 3, radius, i_sizeRand, i_randomness, 
					i_falloff, i_spottyness, i_depthMax, 
					i_frequencyRatio, i_ratio, i_amplitude );
		}
        
        else if( i_noiseType == 2 )
		{
			/* "Wave" noise */
			float x =  pp[0] * i_frequency;
			float y =  pp[1] * i_frequency;
            float z =  pp[2] * i_frequency;
			float time = i_time;
			float timeRatio = sqrt(i_frequencyRatio);
			float amplitude = i_amplitude;
			
			float waveValue = 0;
			
			float i;
			for(i = 0; i < i_depthMax; i += 1)
			{
				float noiseValue = cos_waves3(x, y, z, i_time, i_numWaves);

				x *= i_frequencyRatio;
				y *= i_frequencyRatio;
                z *= i_frequencyRatio;
				time *= timeRatio;
				
				if(i_inflection > 0)
				{
					noiseValue = abs(noiseValue);
				}
				
				waveValue += amplitude * noiseValue;
				amplitude *= i_ratio;
			}
			
			if(i_inflection <= 0)
			{
				waveValue = 0.5 * waveValue + 0.5;
			}
			
			o_outAlpha = waveValue;
		}

		o_outAlpha += i_threshold;
		o_outAlpha = clamp(o_outAlpha,0,1);    
		o_outColor = o_outAlpha;

		colorBalance( o_outColor, 
			o_outAlpha, 
			i_alphaIsLuminance, 
			i_alphaGain, 
			i_alphaOffset, 
			i_colorGain, 
			i_colorOffset, 
			i_invert );
	}
	else
	{
		o_outColor = i_defaultColor;
		o_outAlpha = 0;
	}
}

