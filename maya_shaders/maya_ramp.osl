#include "mayautil.h"
#include "noise_utils.h"
#include "ramp_utils.h"

shader maya_ramp
[[ string help = "Maya ramp"]]
(
    // Inputs
    //
                float               i_alphaGain = 1.0,
                float               i_alphaOffset = 0.0,
                float               i_colorPositions[3] = {0.0, 0.5, 1.0},  /*  */
                color               i_colors[3] = {color(1, 0, 0), color(0, 1, 0), color(0, 0, 1)},  /* {color(1, 0, 0), color(0, 1, 0), color(0, 0, 1)} */
                color               i_colorGain = 1.0,
                color               i_colorOffset = 0.0,
                color               i_defaultColor = 0.5,
                float               i_hueNoise = 0.0,
                float               i_hueNoiseFreq = 0.5,
        /* uniform */ int           i_interpolation = 3,
        /* uniform */ int           i_invert = 0,
                float               i_noise = 0.0,
                float               i_noiseFreq = 0.5,
                float               i_satNoise = 0.0,
                float               i_satNoiseFreq = 0.5,
        /* uniform */ int           i_type = 0,
                float               i_uWave = 0.0,
                vector              i_uvCoord = vector(0.5, 0.5, 0),
                float               i_vWave = 0.0,
                float               i_valNoise = 0.0,
                float               i_valNoiseFreq = 0.5,
	
	// Outputs
	//
	output float o_outAlpha = 0.0,
	output color o_outColor = 1.0)
{
	float ss = i_uvCoord[0];
	float tt = i_uvCoord[1];

	if(ISUVDEFINED(ss, tt))
	{
		float ns = 0;

		if(i_noise > 0)
		{
			ns = i_noise * noise("perlin", ss * i_noiseFreq * 18,	tt * i_noiseFreq * 18);
		}

		ss = fmod(ss + ns, WRAPMAX);
		tt = fmod(tt + ns, WRAPMAX);
    
		float preWaved_tt = tt;
		
		if(i_vWave > 0)
		{
			tt += i_vWave * sin(ss * 2 * M_PI);
		}
		
		if(i_uWave > 0)
		{
			ss -= i_uWave * sin(tt * 2 * M_PI);
		}
				
		
		ss = fmod(ss, WRAPMAX);
		tt = fmod(tt, WRAPMAX);

		float index = 0;
		int   interp[1] = {i_interpolation} ;
		
		if(i_type == 0)
		{
			// v ramp
			index = tt;
			o_outColor = colorRamp(index, i_colorPositions, interp, i_colors);	
		}
		else if(i_type == 1)
		{
			// u ramp
			index = ss;
			o_outColor = colorRamp(index, i_colorPositions, interp, i_colors);	
		}
		else if(i_type == 2)
		{
			// diagonal
			index = (ss + tt) / 2;
			o_outColor = colorRamp(index, i_colorPositions, interp, i_colors);	
		}
		else if(i_type == 3)
		{
			// radial
			index = atan2(ss - 0.5, tt - 0.5);
			index = index / (2 * M_PI) - 0.5;
			index = fmod(index, 1);

			if(index < 0)
			{
				index += 1;
			}

			o_outColor = colorRamp(index, i_colorPositions, interp, i_colors);	
		}
		else if(i_type == 4)
		{
			// circular
			index = 2 * length(vector(ss, tt, 0) - vector(0.5, 0.5, 0)) / 1.41421;
			o_outColor = colorRamp(index, i_colorPositions, interp, i_colors);	
		}
		else if(i_type == 5)
		{
			// box
			index = max(2 * abs(ss - 0.5), 2 * abs(tt - 0.5));
			o_outColor = colorRamp(index, i_colorPositions, interp, i_colors);	
		}
		else if(i_type == 6)
		{
			// UV ramp
			index = 2 * abs(ss - 0.5);
			color s_col = colorRamp(index, i_colorPositions, interp, i_colors);

			index = 2 * abs(tt - 0.5);
			color t_col = colorRamp(index, i_colorPositions, interp, i_colors);
			
			o_outColor = s_col * t_col;
		}
		else if(i_type == 7)
		{
			// 4 corner ramp
			float numPositions = arraylength(i_colorPositions);
			
			if(numPositions < 1)
			{
				o_outColor = 0;
			}
			
			o_outColor = (1 - ss) * (1 - tt) * i_colors[0];
			
			if(numPositions > 1)
			{
				o_outColor += ss * (1 - tt) * i_colors[1];
			}
			if(numPositions > 2)
			{
				o_outColor += (1 - ss) * tt * i_colors[2];
			}
			if(numPositions > 3)
			{
				o_outColor += ss * tt * i_colors[3];
			}
		}
		else
		{
			// Tartan ramp
			index = 2 * abs(ss - 0.5);
			color s_col = colorRamp(index, i_colorPositions, interp, i_colors);

			index = 2 * abs(tt - 0.5);
			color t_col = colorRamp(index, i_colorPositions, interp, i_colors);
		
			o_outColor = (s_col + t_col) / 2;
		}

		if(i_hueNoise > 0 || i_satNoise > 0 || i_valNoise > 0)
		{
			color hsv = transformc("rgb", "hsv", o_outColor);
			float hue = hsv[0];
			float sat = hsv[1];
			float val = hsv[2];
		
			if(i_hueNoise > 0)
			{
				// unclamped hue values seem closer to Maya
				hue += 1.25 * i_hueNoise * noise("perlin", ss * i_hueNoiseFreq * 18,	
					tt * i_hueNoiseFreq * 18);				
			}
			
			if(i_satNoise > 0)
			{
				sat += 1.25 * i_satNoise * noise("perlin", ss * i_satNoiseFreq * 18,	
					tt * i_satNoiseFreq * 18);
					
				sat = clamp(sat, 0, 1);
			}
			
			if(i_valNoise > 0)
			{
				val += 1.25 * i_valNoise * noise("perlin", ss * i_valNoiseFreq * 18,
					tt * i_valNoiseFreq * 18);
				
				val = clamp(val, 0, 1);
			}

			o_outColor = transformc("hsv", "rgb", color("hsv", hue, sat, val));
		}

		o_outAlpha = 1.0;
	
		// It seems that the alpha channel is always computed from the luminance of
		// color by Maya for this shader
		colorBalance(o_outColor, 
			o_outAlpha,
			1,
			i_alphaGain,
			i_alphaOffset,
			i_colorGain,
			i_colorOffset,
			i_invert);
	}
	else
	{
		o_outColor = i_defaultColor;
		o_outAlpha = 1.0;
	}
}


