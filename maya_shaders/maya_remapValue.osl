// -------------for mtoer.xml------------------------------
// <maya_remapValue>
	// <maya.name type="STRING">remapValue</maya.name>
// </maya_remapValue>

#include "ramp_utils.h"
#define REMAP_MAX_POINTS 16

shader maya_remapValue
(
	//	Inputs
				float	i_inputValue								= 0.5,
				float	i_inputMin									= 0.0,
				float	i_inputMax									= 1.0,
				float	i_outputMin									= 0.0,
				float	i_outputMax									= 1.0,
			
				float	i_array_value_Position[REMAP_MAX_POINTS]	= {0,1,0.2,0.7,0.3,0},
				float	i_array_value_FloatValue[REMAP_MAX_POINTS]	= {0,1,0.6,0.3,0.8,0},
	/*uniform*/	int		i_array_value_Interp[REMAP_MAX_POINTS]		= {1,2,0,3,1},

				float	i_array_color_Position[REMAP_MAX_POINTS]	= {0,1,0.2,0.7,0.3,0},
				color	i_array_color_Color[REMAP_MAX_POINTS]		= {0,1,color(0.9,0.6,0),color(0.8,0.3,0.9),color(0.1,0.2,0.6),1},
	/*uniform*/	int		i_array_color_Interp[REMAP_MAX_POINTS]		= {1,2,0,3,1},

	//	Outputs
	output		float	o_outValue									= 0.0,
	output		color	o_outColor									= 0.0
)
{
	// Apply input range
	float V = (i_inputValue - i_inputMin) / (i_inputMax - i_inputMin);

	// Mimic maya's behavior when the input range is empty.
	if( i_inputMin == i_inputMax )
		V = 0;

	// Remap to value
	float out_v = floatRamp(
		V,
		i_array_value_Position,
		i_array_value_Interp,
		i_array_value_FloatValue );

	// Remap to color
	color out_c = colorRamp(
		V,
		i_array_color_Position,
		i_array_color_Interp,
		i_array_color_Color );

	// Apply output range
	o_outValue = i_outputMin + out_v * (i_outputMax - i_outputMin);
	o_outColor = i_outputMin + out_c * (i_outputMax - i_outputMin);
}


