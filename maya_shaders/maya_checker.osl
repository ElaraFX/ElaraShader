#include "mayautil.h"

shader maya_checker
[[ string help = "Maya checker"]]
(
				// Inputs:
				float	i_alphaGain					= 1.0,
				int		i_alphaIsLuminance			= 0,
				float	i_alphaOffset				= 0.0,
				color	i_color1					= color(1, 1, 1),
				color   i_color2					= color(0, 0, 0),
				color	i_colorGain					= color(1, 1, 1),
				color	i_colorOffset				= color(0, 0, 0),
				float	i_contrast					= 1.0,	
				color	i_defaultColor				= color(0.5, 0.5, 0.5),
				float	i_filter					= 1.0,
				float	i_filterOffset				= 0.0,
				int		i_invert					= 0,
				vector	i_uvCoord					= vector(0, 0, 0),

				// Outputs:
	output		float	o_outAlpha					= 0,
	output		color	o_outColor					= color(0.0, 0.0, 0.0)
)
{
	float ss = i_uvCoord[0];
	float tt = 1.0 - i_uvCoord[1]; // we invert v in place2dTexture, but this makes the checker different with Maya. so we have to invert v back.

	if(ISUVDEFINED(ss, tt))
	{
		/* compute 'ss' and 'tt' filter widths. 
			In ER-OSL implemtation, the dx and dy are the derivates of screen space
			and are always 1 */
		/*uniform*/ float dx = 1.0;
		/*uniform*/ float dy = 1.0;
		float dss = abs(Dx(ss) * dx) + abs(Dy(ss) * dy);
		float dtt = abs(Dx(tt) * dx) + abs(Dy(tt) * dy);
		
		ss = mod(ss, WRAPMAX);
		tt = mod(tt, WRAPMAX);

		/* Add in "Effects" filter values. We multiplie the i_filterOffset
			  variable by 2 to match Maya's look */
		dss = dss * i_filter + i_filterOffset * 2;
		dtt = dtt * i_filter + i_filterOffset * 2;	
	
		/* compute separation: 0 for half the squares, 1 for the others. */
		float f = 0.5 - 2 *
			(filteredpulsetrain(0.5, 1, ss, dss) - 0.5) *
			(filteredpulsetrain(0.5, 1, tt, dtt) - 0.5);
		
		/* contrast interpolates the separation from 0.5 to its normal value. */
		f = 0.5 + (f - 0.5) * i_contrast;

		/* Compute final values. */
		o_outAlpha = 1 - f;
		o_outColor = i_color1 + (i_color2 - i_color1) * f;
		
		colorBalance(o_outColor, 
			o_outAlpha,
			i_alphaIsLuminance,
			i_alphaGain,
			i_alphaOffset,
			i_colorGain,
			i_colorOffset,
			i_invert);
	}
	else
	{
		o_outColor = i_defaultColor;
		o_outAlpha = luminance( i_defaultColor );
	}
}