// -------------for mtoer.xml------------------------------
// <maya_layeredTexture>
	// <maya.name type="STRING">layeredTexture</maya.name>
// </maya_layeredTexture>

#include "mayautil.h"
#define LAYEREDTEXTURE_MAX_LAYERS 16
#define cabs(a) abs(a)

shader maya_layeredTexture(
	// Inputs
	//			color	i_array_inputs_color[LAYEREDTEXTURE_MAX_LAYERS]		= {color(0.2,0.7,0.3), color(1.0,0.0,0.0), color(0.0) },
				color		i_inputs_color_0			= color(0.2,0.7,0.3),
				color		i_inputs_color_1			= color(1.0,0.0,0.0),
				color		i_inputs_color_2			= color(0),
				color		i_inputs_color_3			= color(0),
				color		i_inputs_color_4			= color(0),
				color		i_inputs_color_5			= color(0),
				color		i_inputs_color_6			= color(0),
				color		i_inputs_color_7			= color(0),
				color		i_inputs_color_8			= color(0),
				color		i_inputs_color_9			= color(0),
				color		i_inputs_color_10			= color(0),
				color		i_inputs_color_11			= color(0),
				color		i_inputs_color_12			= color(0),
				color		i_inputs_color_13			= color(0),
				color		i_inputs_color_14			= color(0),
				color		i_inputs_color_15			= color(0),
	//			float	i_array_inputs_alpha[LAYEREDTEXTURE_MAX_LAYERS]		= {0.5, 1.0, 1.0},
				float		i_inputs_alpha_0			= 0.5,
				float		i_inputs_alpha_1			= 1.0,
				float		i_inputs_alpha_2			= 1.0,
				float		i_inputs_alpha_3			= 1.0,
				float		i_inputs_alpha_4			= 1.0,
				float		i_inputs_alpha_5			= 1.0,
				float		i_inputs_alpha_6			= 1.0,
				float		i_inputs_alpha_7			= 1.0,
				float		i_inputs_alpha_8			= 1.0,
				float		i_inputs_alpha_9			= 1.0,
				float		i_inputs_alpha_10			= 1.0,
				float		i_inputs_alpha_11			= 1.0,
				float		i_inputs_alpha_12			= 1.0,
				float		i_inputs_alpha_13			= 1.0,
				float		i_inputs_alpha_14			= 1.0,
				float		i_inputs_alpha_15			= 1.0,
	
	///*uniform*/	int		i_array_inputs_blendMode[LAYEREDTEXTURE_MAX_LAYERS]	= {1,1,0},
				int			i_inputs_blendMode_0		= 1,
				int			i_inputs_blendMode_1		= 1,
				int			i_inputs_blendMode_2		= 0,
				int			i_inputs_blendMode_3		= 0,
				int			i_inputs_blendMode_4		= 0,
				int			i_inputs_blendMode_5		= 0,
				int			i_inputs_blendMode_6		= 0,
				int			i_inputs_blendMode_7		= 0,
				int			i_inputs_blendMode_8		= 0,
				int			i_inputs_blendMode_9		= 0,
				int			i_inputs_blendMode_10		= 0,
				int			i_inputs_blendMode_11		= 0,
				int			i_inputs_blendMode_12		= 0,
				int			i_inputs_blendMode_13		= 0,
				int			i_inputs_blendMode_14		= 0,
				int			i_inputs_blendMode_15		= 0,
	
	///*uniform*/	int		i_array_inputs_isVisible[LAYEREDTEXTURE_MAX_LAYERS]	= {1,1,0},
				int			i_inputs_isVisible_0		= 1,
				int			i_inputs_isVisible_1		= 1,
				int			i_inputs_isVisible_2		= 0,
				int			i_inputs_isVisible_3		= 0,
				int			i_inputs_isVisible_4		= 0,
				int			i_inputs_isVisible_5		= 0,
				int			i_inputs_isVisible_6		= 0,
				int			i_inputs_isVisible_7		= 0,
				int			i_inputs_isVisible_8		= 0,
				int			i_inputs_isVisible_9		= 0,
				int			i_inputs_isVisible_10		= 0,
				int			i_inputs_isVisible_11		= 0,
				int			i_inputs_isVisible_12		= 0,
				int			i_inputs_isVisible_13		= 0,
				int			i_inputs_isVisible_14		= 0,
				int			i_inputs_isVisible_15		= 0,

				int		i_alphaIsLuminance									= 0,

	// Outputs
	output		color	o_outColor											= 0.0,
	output		float	o_outAlpha											= 0.0,
	output		color	o_outTransparency									= 0.0
	)
{
	color i_array_inputs_color[16] = {
									i_inputs_color_0,
									i_inputs_color_1,
									i_inputs_color_2,
									i_inputs_color_3,
									i_inputs_color_4,
									i_inputs_color_5,
									i_inputs_color_6,
									i_inputs_color_7,
									i_inputs_color_8,
									i_inputs_color_9,
									i_inputs_color_10,
									i_inputs_color_11,
									i_inputs_color_12,
									i_inputs_color_13,
									i_inputs_color_14,
									i_inputs_color_15
	};
	float i_array_inputs_alpha[16] = {
									i_inputs_alpha_0,
									i_inputs_alpha_1,
									i_inputs_alpha_2,
									i_inputs_alpha_3,
									i_inputs_alpha_4,
									i_inputs_alpha_5,
									i_inputs_alpha_6,
									i_inputs_alpha_7,
									i_inputs_alpha_8,
									i_inputs_alpha_9,
									i_inputs_alpha_10,
									i_inputs_alpha_11,
									i_inputs_alpha_12,
									i_inputs_alpha_13,
									i_inputs_alpha_14,
									i_inputs_alpha_15
	};
	int i_array_inputs_blendMode[16] = {
									i_inputs_blendMode_0,
									i_inputs_blendMode_1,
									i_inputs_blendMode_2,
									i_inputs_blendMode_3,
									i_inputs_blendMode_4,
									i_inputs_blendMode_5,
									i_inputs_blendMode_6,
									i_inputs_blendMode_7,
									i_inputs_blendMode_8,
									i_inputs_blendMode_9,
									i_inputs_blendMode_10,
									i_inputs_blendMode_11,
									i_inputs_blendMode_12,
									i_inputs_blendMode_13,
									i_inputs_blendMode_14,
									i_inputs_blendMode_15
	};
	int i_array_inputs_isVisible[16] = {
									i_inputs_isVisible_0,
									i_inputs_isVisible_1,
									i_inputs_isVisible_2,
									i_inputs_isVisible_3,
									i_inputs_isVisible_4,
									i_inputs_isVisible_5,
									i_inputs_isVisible_6,
									i_inputs_isVisible_7,
									i_inputs_isVisible_8,
									i_inputs_isVisible_9,
									i_inputs_isVisible_10,
									i_inputs_isVisible_11,
									i_inputs_isVisible_12,
									i_inputs_isVisible_13,
									i_inputs_isVisible_14,
									i_inputs_isVisible_15
	};
	
	int numLayers = arraylength( i_array_inputs_color );
	int i;
	
	o_outColor = 0;
	o_outAlpha = 0;

	for( i = numLayers - 1; i >= 0; i -= 1 )
	{
		if( i_array_inputs_isVisible[i] != 1.0 )
			continue;

		color fc = i_array_inputs_color[i];
		float fa = i_array_inputs_alpha[i];
		float blend = i_array_inputs_blendMode[i];

		if( blend == 0.0 ) /* None */
		{
			o_outColor = fc;
			o_outAlpha = fa;
		}
		else if( blend == 1.0 ) /* Over */
		{
			o_outColor = fc * fa + (o_outColor * (1 - fa));
			o_outAlpha = 1 - ((1 - o_outAlpha) * (1 - fa));
		}
		else if( blend == 2.0 ) /* In */
		{
			o_outColor *= fa;
			o_outAlpha *= fa;
		}
		else if( blend == 3.0 ) /* Out */
		{
			o_outColor *= (1 - fa);
			o_outAlpha *= (1 - fa);
		}
		else if( blend == 4.0 ) /* Add */
		{
			o_outColor += fc * fa;
		}
		else if( blend == 5.0 ) /* Subtract */
		{
			o_outColor -= fc * fa;
		}
		else if( blend == 6.0 ) /* Multiply */
		{
			o_outColor *= (fc * fa + 1 - fa);
		}
		else if( blend == 7.0 ) /* Difference */
		{
			o_outColor = (cabs((fc * fa) - o_outColor)) * fa + o_outColor * (1 - fa);
		}
		else if( blend == 8.0 ) /* Lighten */
		{
			o_outColor = (max((fc * fa), o_outColor)) * fa + o_outColor * (1 - fa);
		}
		else if( blend == 9.0 ) /* Darken */
		{
			o_outColor = (min((fc * fa), o_outColor)) * fa + o_outColor * (1 - fa);
		}
		else if( blend == 10.0 ) /* Saturate */
		{
			o_outColor *= (1 + (fc * fa));
		}
		else if( blend == 11.0 ) /* Desaturate */
		{
			o_outColor *= (1 - (fc * fa));
		}
		else /* 12.0 : Illuminate */
		{
			o_outColor *= (2 * fc * fa + 1 - fa);
		}
	}

	if( i_alphaIsLuminance != 0.0 )
	{
		o_outAlpha = luminance( o_outColor );
	}

	o_outTransparency = color( 1.0 - o_outAlpha );
}


