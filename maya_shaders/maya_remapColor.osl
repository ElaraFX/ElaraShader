// -------------for mtoer.xml------------------------------
// <maya_remapColor>
	// <maya.name type="STRING">remapColor</maya.name>
// </maya_remapColor>

#include "ramp_utils.h"
#define RAMP_MAX_POINTS 16
shader maya_remapColor
[[ string help = "Maya ramapColor"]]
(//{
	// Inputs
				color	i_color							= 0.5,
				
				float	i_rPositions[RAMP_MAX_POINTS]	= {0.0, 1.0, 0.0} ,
				float	i_rFloatValues[RAMP_MAX_POINTS]	= {0.0, 1.0, 0.0} ,
	/*uniform*/	int		i_rInterp[RAMP_MAX_POINTS]		= {1} ,
				float	i_gPositions[RAMP_MAX_POINTS]	= {0.0, 1.0, 0.0} ,
				float	i_gFloatValues[RAMP_MAX_POINTS]	= {0.0, 1.0, 0.0} ,
	/*uniform*/	int		i_gInterp[RAMP_MAX_POINTS]		= {1} ,
				float	i_bPositions[RAMP_MAX_POINTS]	= {0.0, 1.0, 0} ,
				float	i_bFloatValues[RAMP_MAX_POINTS]	= {0.0, 1.0, 0} ,
	/*uniform*/	int		i_bInterp[RAMP_MAX_POINTS]		= {1} ,
				float	i_inputMin						= 0.0,
				float	i_inputMax						= 1.0,
				float	i_outputMin						= 0.0,
				float	i_outputMax						= 1.0,
	
	// Outputs
	output		color	o_outColor				= 0.0
)//}
{
	// Apply input range
	color c = (i_color - i_inputMin) / (i_inputMax - i_inputMin);

	// Mimic maya's behavior when the input range is empty.
	if( i_inputMin == i_inputMax )
		c = 0;
	
	
	// Remap red
	float red = floatRamp(
		c[0],
		i_rPositions,
		i_rInterp,
		i_rFloatValues );

	c[0] = red;

	// Remap green
	float green = floatRamp(
		c[1],
		i_gPositions,
		i_gInterp,
		i_gFloatValues );

	c[1] = green ;

	// Remap blue
	float blue = floatRamp(
		c[2],
		i_bPositions,
		i_bInterp,
		i_bFloatValues );

	c[2] = blue;

	// Apply output range
	o_outColor = i_outputMin + c * (i_outputMax - i_outputMin);
	//~ o_outColor = 0.5;
}


