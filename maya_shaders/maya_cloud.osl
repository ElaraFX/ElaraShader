#include "texture3d.h"
#include "mayautil.h"
#include "noise_utils.h"
#include "stdosl.h"

shader maya_cloud
[[ string help = "Maya cloud"]]
(
	// Inputs
	//
                            float       i_alphaGain = 1.0,
              /* uniform */ int         i_alphaIsLuminance = 0,
                            float       i_alphaOffset = 0.0,              
                            float       i_blend = 0.0,
                            color       i_colorGain = 1.0,
                            color       i_colorOffset =0.0,
                            color       i_defaultColor = 0.5,
              /* uniform */ int         i_invert = 0,
                            int         i_local = 0,
                            int         i_wrap = 1,
                            
             /* uniform */ float        i_amplitude = 1.0,               
                            float       i_centerThresh = 0.0,
                            color       i_color1 = 0.0,
                            color       i_color2 = 1.0,
                            float       i_contrast = 0.5,
              /* uniform */ vector      i_depth = vector(0.0, 8.0, 0.0),
                            float       i_edgeThresh = 1.0,
                            
                            normal      i_normalCamera = normal(0, 0, 1),
                            matrix      i_placementMatrix = matrix(   1.0, 0.0, 0.0, 0.0,
                                                        0.0, 1.0, 0.0, 0.0,
                                                        0.0, 0.0, 1.0, 0.0,
                                                        0.0, 0.0, 0.0, 1.0),
              /* uniform */ float       i_ratio = 0.707,
                            vector      i_ripples = vector(1.0, 1.0, 1.0),
                            int         i_softEdges = 1,
                            float       i_transpRange = 0.5,


	// Outputs
	//
	output float o_outAlpha = 1.0,
	output color o_outColor = 0.0)
{
	float edgeDist;
	float outside;
	point pp = transformP(i_blend, 
		i_local, 
		i_placementMatrix, 
		i_wrap, edgeDist, 
		outside);
    

	if(outside < 1)
	{
		float mixValue = fBrownianNoise(pp, 0, i_amplitude, 1, 2, i_depth, i_ratio, i_ripples);
		color c1 = i_color1;

		o_outAlpha = mixValue;
		c1 = mix(i_color2, c1, i_contrast);
		o_outColor = mix(i_color2, c1, 1 - mixValue);        
  
		if(i_softEdges > 0)
		{
        normal texNormal = normalize(transform("camera", N));
        normal nI = normalize(-I);
        float facing = dot(nI, texNormal);
        float dp = 1.0 - (facing * facing);
        dp = clamp(dp, 0, 1);
        dp = sqrt(dp);
        float threshold = mix(i_centerThresh, i_edgeThresh, dp);
        float tprange = max(i_transpRange, .0001);
        // outAlpha contains: .5 * (1 + c)
        float tmp = (threshold - o_outAlpha) / tprange;
        if(tmp > 1)
            o_outAlpha = 1;
        else
        if(tmp < -10)
            o_outAlpha = 0;
        else
        {
            o_outAlpha = exp(tmp);
            o_outAlpha = clamp(o_outAlpha, 0, 1);
        }
			o_outColor *= (1 - o_outAlpha);
		}
		
		colorBalance(o_outColor, 
			o_outAlpha, 
			i_alphaIsLuminance, 
			i_alphaGain, 
			i_alphaOffset, 
			i_colorGain, 
			i_colorOffset, 
			i_invert);

		o_outColor = clamp(o_outColor, 0, 1);
		o_outAlpha = clamp(o_outAlpha, 0, 1);
	}
	else
	{
		o_outColor = clamp(i_defaultColor, 0, 1);
		o_outAlpha = 0;
	}
}


